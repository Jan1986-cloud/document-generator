name: Deploy to Google Cloud

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  REGION: europe-west4
  BACKEND_SERVICE: document-generator-backend
  FRONTEND_SERVICE: document-generator-frontend

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./document-generator-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      working-directory: ./document-generator-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        # Create test database tables
        python -c "from src.models.database import db; db.create_all()"
        
        # Run tests (when implemented)
        # pytest tests/ --cov=src --cov-report=xml
        
        echo "Backend tests passed (placeholder)"

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Cache pnpm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      working-directory: ./document-generator-frontend
      run: pnpm install --frozen-lockfile

    - name: Run linting
      working-directory: ./document-generator-frontend
      run: |
        # pnpm run lint (when configured)
        echo "Frontend linting passed (placeholder)"

    - name: Run tests
      working-directory: ./document-generator-frontend
      run: |
        # pnpm run test (when implemented)
        echo "Frontend tests passed (placeholder)"

    - name: Build application
      working-directory: ./document-generator-frontend
      env:
        VITE_API_BASE_URL: https://api.example.com/api
      run: pnpm run build

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on main branch)
  deploy-staging:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.frontend-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Deploy Backend to Cloud Run
      id: deploy-backend
      run: |
        cd document-generator-backend
        
        # Build and push image
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA
        
        # Deploy to Cloud Run
        gcloud run deploy $BACKEND_SERVICE-staging \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --set-secrets "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-key-staging:latest" \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300 \
          --max-instances 5 \
          --port 8080 \
          --tag staging
        
        # Get backend URL
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE-staging --region=$REGION --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to Cloud Run
      id: deploy-frontend
      run: |
        cd document-generator-frontend
        
        # Create production environment file
        cat > .env.production << EOF
        VITE_API_BASE_URL=${{ steps.deploy-backend.outputs.backend-url }}/api
        VITE_APP_NAME=Document Generator (Staging)
        VITE_APP_VERSION=$GITHUB_SHA
        VITE_GOOGLE_CLOUD_PROJECT=$PROJECT_ID
        VITE_ENABLE_REGISTRATION=true
        VITE_ENABLE_DARK_MODE=true
        VITE_ENABLE_NOTIFICATIONS=true
        VITE_DEBUG_MODE=false
        EOF
        
        # Build and push image
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA
        
        # Deploy to Cloud Run
        gcloud run deploy $FRONTEND_SERVICE-staging \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 60 \
          --max-instances 3 \
          --port 8080 \
          --tag staging
        
        # Get frontend URL
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE-staging --region=$REGION --format="value(status.url)")
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run Database Migrations
      run: |
        gcloud run jobs create migrate-database-staging \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --region $REGION \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --set-secrets "DATABASE_URL=database-url-staging:latest" \
          --command "python" \
          --args "-c,\"from src.models.database import db; db.create_all(); print('Database tables created successfully')\"" \
          --replace
        
        gcloud run jobs execute migrate-database-staging --region $REGION --wait

    - name: Comment PR with staging URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Staging deployment completed!\n\n**Frontend:** ${{ steps.deploy-frontend.outputs.frontend-url }}\n**Backend:** ${{ steps.deploy-backend.outputs.backend-url }}`
          })

  # Deploy to Production (on production branch)
  deploy-production:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.frontend-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Deploy Backend to Cloud Run
      id: deploy-backend
      run: |
        cd document-generator-backend
        
        # Build and push image
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA
        
        # Deploy to Cloud Run
        gcloud run deploy $BACKEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --set-secrets "DATABASE_URL=database-url:latest,JWT_SECRET_KEY=jwt-secret-key:latest" \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --timeout 300 \
          --max-instances 20 \
          --port 8080
        
        # Get backend URL
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to Cloud Run
      id: deploy-frontend
      run: |
        cd document-generator-frontend
        
        # Create production environment file
        cat > .env.production << EOF
        VITE_API_BASE_URL=${{ steps.deploy-backend.outputs.backend-url }}/api
        VITE_APP_NAME=Document Generator
        VITE_APP_VERSION=$GITHUB_SHA
        VITE_GOOGLE_CLOUD_PROJECT=$PROJECT_ID
        VITE_ENABLE_REGISTRATION=true
        VITE_ENABLE_DARK_MODE=true
        VITE_ENABLE_NOTIFICATIONS=true
        VITE_DEBUG_MODE=false
        EOF
        
        # Build and push image
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA
        
        # Deploy to Cloud Run
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 60 \
          --max-instances 10 \
          --port 8080
        
        # Get frontend URL
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --region=$REGION --format="value(status.url)")
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run Database Migrations
      run: |
        gcloud run jobs create migrate-database \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --region $REGION \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --set-secrets "DATABASE_URL=database-url:latest" \
          --command "python" \
          --args "-c,\"from src.models.database import db; db.create_all(); print('Database tables created successfully')\"" \
          --replace
        
        gcloud run jobs execute migrate-database --region $REGION --wait

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸš€ Production deployment completed!
          
          **Frontend:** ${{ steps.deploy-frontend.outputs.frontend-url }}
          **Backend:** ${{ steps.deploy-backend.outputs.backend-url }}
          **Commit:** ${{ github.sha }}
        draft: false
        prerelease: false

