name: Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  ARTIFACT_REPO: ${{ secrets.ARTIFACT_REPO }}
  BACKEND_SERVICE: 'document-generator-backend'
  FRONTEND_SERVICE: 'document-generator-frontend'
  CLOUDSQL_INSTANCE: ${{ secrets.CLOUDSQL_INSTANCE }}
  GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  GCP_APP_SA_EMAIL: ${{ secrets.GCP_APP_SA_EMAIL }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      working-directory: ./document-generator-backend
      run: pip install -r requirements.txt
    - name: Run Backend Tests
      working-directory: ./document-generator-backend
      env:
        DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
        FLASK_ENV: "testing"
      run: echo "Backend tests placeholder" # pytest of andere testcommando's komen hier

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Install dependencies
      working-directory: ./document-generator-frontend
      run: pnpm install --no-frozen-lockfile
    - name: Build application
      working-directory: ./document-generator-frontend
      run: pnpm run build

  deploy-staging:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Deploy Backend
      id: deploy-backend
      run: |
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.BACKEND_SERVICE }}"
        
        docker build -t $IMAGE_URL:$GITHUB_SHA ./document-generator-backend
        docker push $IMAGE_URL:$GITHUB_SHA
        
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image $IMAGE_URL:$GITHUB_SHA \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --service-account ${{ env.GCP_APP_SA_EMAIL }} \
          --add-cloudsql-instances "${{ env.CLOUDSQL_INSTANCE }}" \
          --set-secrets="DATABASE_URL=db-app-password:latest" \
          --tag staging

        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Build and Deploy Frontend
      id: deploy-frontend
      run: |
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.FRONTEND_SERVICE }}"
        
        cd document-generator-frontend
        docker build -t $IMAGE_URL:$GITHUB_SHA .
        docker push $IMAGE_URL:$GITHUB_SHA
        
        gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
          --image $IMAGE_URL:$GITHUB_SHA \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated

        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT