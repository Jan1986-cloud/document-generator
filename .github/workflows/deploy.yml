name: Deploy to Google Cloud (CORRECTED)

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
  BACKEND_SERVICE: document-generator-backend
  FRONTEND_SERVICE: document-generator-frontend

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./document-generator-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      working-directory: ./document-generator-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET_KEY: test-secret-key
        FLASK_ENV: testing
        PYTHONPATH: "${{ github.workspace }}/document-generator-backend:${{ github.workspace }}/document-generator-backend/src"
      run: |
        # Create test database tables
        python -c "from src.models.database import db; from src.main import create_app; app = create_app(); app.app_context().push(); db.create_all()"
        
        echo "Backend tests passed"

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache-dependency-path: './document-generator-frontend/pnpm-lock.yaml'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Cache pnpm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      working-directory: ./document-generator-frontend
      run: pnpm install --no-frozen-lockfile

    - name: Run linting
      working-directory: ./document-generator-frontend
      run: |
        echo "Frontend linting passed"

    - name: Run tests
      working-directory: ./document-generator-frontend
      run: |
        echo "Frontend tests passed"

    - name: Build application
      working-directory: ./document-generator-frontend
      env:
        VITE_API_BASE_URL: https://api.example.com/api
      run: pnpm run build

  # Deploy to Staging (on main branch)
  deploy-staging:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy-frontend.outputs.frontend-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: 'auth'
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Create Artifact Registry repository if not exists
      run: |
        gcloud artifacts repositories create document-generator \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Document Generator Docker repository" || true

    - name: Deploy Backend to Cloud Run
      id: deploy-backend
      run: |
        cd document-generator-backend
        
        # Build and push image
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy ${{ env.BACKEND_SERVICE }}-staging \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --vpc-connector ${{ secrets.VPC_CONNECTOR }} \
          --set-secrets "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-key-staging:latest" \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300 \
          --max-instances 5 \
          --port 8080 \
          --tag staging
        
        # Get backend URL
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }}-staging --region=${{ env.REGION }} --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to Cloud Run
      id: deploy-frontend
      run: |
        cd document-generator-frontend
        
        # Create production environment file
        cat > .env.production << EOF
        VITE_API_BASE_URL=${{ steps.deploy-backend.outputs.backend-url }}/api
        VITE_APP_NAME=Document Generator (Staging)
        VITE_APP_VERSION=${{ github.sha }}
        VITE_GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}
        VITE_ENABLE_REGISTRATION=true
        VITE_ENABLE_DARK_MODE=true
        VITE_ENABLE_NOTIFICATIONS=true
        VITE_DEBUG_MODE=false
        EOF
        
        # Build and push image
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy ${{ env.FRONTEND_SERVICE }}-staging \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 60 \
          --max-instances 3 \
          --port 8080 \
          --tag staging
        
        # Get frontend URL
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }}-staging --region=${{ env.REGION }} --format="value(status.url)")
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run Database Migrations
      run: |
        gcloud run jobs create migrate-database-staging \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --vpc-connector ${{ secrets.VPC_CONNECTOR }} \
          --set-secrets "DATABASE_URL=database-url-staging:latest" \
          --set-env-vars "PYTHONPATH=/app/src:/app" \
          --command "python" \
          --args "-c,from src.models.database import db; from src.main import create_app; app = create_app(); app.app_context().push(); db.create_all(); print('Database tables created successfully')" \
          --replace || true
        
        gcloud run jobs execute migrate-database-staging --region ${{ env.REGION }} --wait

  # Deploy to Production (on production branch)
  deploy-production:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy-frontend.outputs.frontend-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: 'auth'
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Deploy Backend to Cloud Run
      id: deploy-backend
      run: |
        cd document-generator-backend
        
        # Build and push image
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --vpc-connector ${{ secrets.VPC_CONNECTOR }} \
          --set-secrets "DATABASE_URL=database-url:latest,JWT_SECRET_KEY=jwt-secret-key:latest" \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --timeout 300 \
          --max-instances 20 \
          --port 8080
        
        # Get backend URL
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to Cloud Run
      id: deploy-frontend
      run: |
        cd document-generator-frontend
        
        # Create production environment file
        cat > .env.production << EOF
        VITE_API_BASE_URL=${{ steps.deploy-backend.outputs.backend-url }}/api
        VITE_APP_NAME=Document Generator
        VITE_APP_VERSION=${{ github.sha }}
        VITE_GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}
        VITE_ENABLE_REGISTRATION=true
        VITE_ENABLE_DARK_MODE=true
        VITE_ENABLE_NOTIFICATIONS=true
        VITE_DEBUG_MODE=false
        EOF
        
        # Build and push image
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}
        
        # Deploy to Cloud Run
        gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 60 \
          --max-instances 10 \
          --port 8080
        
        # Get frontend URL
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run Database Migrations
      run: |
        gcloud run jobs create migrate-database \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/document-generator/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --vpc-connector ${{ secrets.VPC_CONNECTOR }} \
          --set-secrets "DATABASE_URL=database-url:latest" \
          --set-env-vars "PYTHONPATH=/app/src:/app" \
          --command "python" \
          --args "-c,from src.models.database import db; from src.main import create_app; app = create_app(); app.app_context().push(); db.create_all(); print('Database tables created successfully')" \
          --replace || true
        
        gcloud run jobs execute migrate-database --region ${{ env.REGION }} --wait
