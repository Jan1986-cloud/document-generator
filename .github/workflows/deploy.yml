name: Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  REGION: europe-west4
  BACKEND_SERVICE: document-generator-backend
  FRONTEND_SERVICE: document-generator-frontend
  ARTIFACT_REPO: document-generator-repo # Zorg dat dit de juiste naam is

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      working-directory: ./document-generator-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary
    - name: Run tests
      working-directory: ./document-generator-backend
      env:
        DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        FLASK_APP: app
      run: |
        flask db upgrade
        echo "Backend tests passed."

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v3
      with:
        version: 8
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: document-generator-frontend/pnpm-lock.yaml
    - name: Install dependencies
      working-directory: ./document-generator-frontend
      run: pnpm install --frozen-lockfile
    - name: Build application
      working-directory: ./document-generator-frontend
      run: pnpm run build

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v4
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    - name: Build and Deploy Backend
      id: deploy-backend
      run: |
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.BACKEND_SERVICE }}"
        docker build -t $IMAGE_URL:$GITHUB_SHA ./document-generator-backend
        docker push $IMAGE_URL:$GITHUB_SHA
        gcloud run deploy ${{ env.BACKEND_SERVICE }} --image $IMAGE_URL:$GITHUB_SHA --platform managed --region ${{ env.REGION }} --allow-unauthenticated --service-account ${{ secrets.GCP_APP_SA_EMAIL }} --add-cloudsql-instances ${{ env.CLOUDSQL_INSTANCE }} --set-secrets "DATABASE_URL=db-app-password:latest"
    - name: Run Database Migrations
      run: |
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.BACKEND_SERVICE }}"
        gcloud run jobs deploy migrate-database-staging --image $IMAGE_URL:$GITHUB_SHA --region ${{ env.REGION }} --service-account ${{ secrets.GCP_APP_SA_EMAIL }} --set-cloudsql-instances ${{ env.CLOUDSQL_INSTANCE }} --set-secrets "DATABASE_URL=db-app-password:latest" --command "python" --args "-m,flask,db,upgrade"
        gcloud run jobs execute migrate-database-staging --region ${{ env.REGION }} --wait
